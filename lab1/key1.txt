Haochen Li
204739914

1.1 
1. emacs exer1.html 
2. C-s P U B L I C Enter
3. M-< C-s L a b o r a t o r y C-s Enter
4. M-< C-s s e l f - r e f e r e n t i a l C-s Enter
5. M-< C-s a r r o w C-s
6. C-e
7. C-a
8. I think this is the most efficient way
9. No
10. C-x C-c



1.2
1. e m a c s exer2.html
2. M-x g o t o - l i n e    Enter 1 8  C-k
3. C-s D E L E  C-a  C-k
4. M-< C-s h t t p s : / / e n . w i k i p e d i a . o r g /   C-s  C-a C-p M-k C-n C-k
5. C-s < ! Enter C-a C-k 
M-< C-s < ! C-s Enter C-a C-k
C-x C-c
d i f f sp - u sp  e x e r 1 . h t m l sp e x e r 2 . h t m l sp > e x  e r 2 . d i f f

1.3 
1. e m a c s  e x e r 3 . h t m l
2. C-s A s s i g n m e n t 1    M-% A s s i g n m e n t 3 7 Enter y y
3. C-s U T F - 8 M-% U S - A S C I I Enter y
4. C-s </ol> C-p C-e C-o
5. C-x C-c
d i f f sp - u sp  e x e r 1 . h t m l sp e x e r 3 . h t m l sp > e x  e r 3 . d i f f

1.4
1. c a t e x e r 2 . h t m l e x e r 2 . d i f f > e x e r 4 . h t m l
2. Emacs e x e r 4 . h t m l 
3. C-x ] up up right C-sp C-e C-n C-n M-w M-x g o t o - l i n e 352 sp sp sp sp C-y
4. C-s — - - - > right C-sp left left left left left left left M-w M-x g o t o - l i n e Enter 337 C-y
C-s Y O U C A N L E A R M-a right C-sp C-e M-w M-x g o t o - l i n e Enter 300 C-y
C-s D E L E T E M E M-a right C-sp C-e M-w M-x g o t o - l i n e Enter 90 C-y 
C-s — - d i f f , right C-sp  C-e M-w M-x g o t o - l i n e Enter 15 C-y
5. C-s — - - left left left C-sp C-e M-> C-w 
6. C-x u
7. C-s - - - left left left < ! - - M-> - - >
8. C-s < o l > M-% y y y y y y y 
   7 instances were found in the file. 
9. C-x C-c 

1.5
1. M-x m a k e - d i r e c t o r y Enter j u n k
2. C-c M-< C-v 
3. C-x C-f j u n k / h e l l o . c 
4. M-x c o m p i l e . / h e l l o -o h e l l o - o u t Enter
5. -*- mode: compilation; default-directory: "~/junk/" -*-
Compilation started at Fri Oct  6 00:48:09
./hello -o hello-out
#include <stdio.h>
int
main (void) 
{char n = '\n';
  char b = '\\';
  char q = '"';
   char const *p = "#include <stdio.h>%cint%cmain 
  (void)%c{%c  char n = '%cn';%c  char b = '%c%c';%c  char q = '%c';%c  
  char const *p = %c%s%c;%c  printf (p, n, n, n, n, b, n, b, \
b, n, q, n, q, p, q, n, n, n, n);%c  return 0;%c}%c";
  printf (p, n, n, n, n, b, n, b, b, n, q, n, q, p, q, n, n, n, n);
  return 0;}
Compilation finished at Fri Oct  6 00:48:09

1.6 
1. C-x b * s c r a t c h * Enter
2. ( r a n d o m ) C
 321323397751570311
3. (s e t q x ( r a n d o m ) ) C-j  (s e t q y ( r a n d o m ) ) C-j  
x= -737004071327947834
y= -1000278277145540493
4. ( * sp x sp y ) C-j
product = 470588570765279730 The answer is mathematically incorrect because it apparently has less digit than x*y 
5. M-: ( * sp x sp y ) Enter
The answer is same
6. They are not truly random in mathematical way since computer uses specific algorithm to generate the number.They are not random because they both generated based on initial seeds. 
7. The possibility rate is 0.9999999999999999. It could be calculate through adding up the possibility of positive overflow and negative overflow. The positive overflow could be calculated as sigma(1~2^61-1) (1-1/n) so that overflow’s possibility is 2*sigma(1~2^61-1) (1-1/n). While choosing a random integer’s possibility is 1/2^62(the total number in emacs is 2^61-1+2^62 approximately 2^62). Therefore, I would would come up the equation of 1/2^26(sigma(1~2^61-1))
